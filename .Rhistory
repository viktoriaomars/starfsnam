pca.train$GT <- combi$GT[1:nrow(train)]
pca.train$GT
pca.train$GT <- as.factor(pca.train$GT)
library(rpart)
rpart.model <- rpart(GT ~ .,data = pca.train)
rpart.model
rpart.prediction <- predict(rpart.model, pca.test)
test$GT <- rpart.prediction
write.csv(test, "pca.csv", row.names = F)
train1 <- read.delim("output_adtrain.txt")
test1 <- read.delim("output_adtest.txt")
info <- read.delim("output_info.txt")
train <- merge(train1,info,by="Variant")
test <- merge(test1,info,by="Variant")
test$GT <- 1
combi <- rbind(train, test)
#combi$REF_AD <- ifelse(combi$REF_AD == 0, median(combi$REF_AD), combi$REF_AD)
#combi$ALT_AD <- ifelse(combi$ALT_AD == 0, median(combi$ALT_AD), combi$ALT_AD)
#Find columns with no variance, wan to remove that
no_var <- which(apply(combi, 2, var)==0)
my_data <- subset(combi, select = -c(GT, Sample, Variant, no_var))
colnames(my_data)
str(my_data)
#divide data
pca.train <- my_data[1:nrow(train),]
pca.test <- my_data[-(1:nrow(train)),]
#principal component analysis
prin_comp <- prcomp(pca.train, scale. = T)
names(prin_comp)
#outputs the mean of variables
prin_comp$center
#outputs the standard deviation of variables
prin_comp$scale
#outputs prinicipal component loading
prin_comp$rotation
#plot resultant principal components
biplot(prin_comp, scale = 0)
#compute standard deviation of each principal component
std_dev <- prin_comp$sdev
#compute variance
pr_var <- std_dev^2
#check variance of first 10 components
pr_var
#proportion of variance explained
prop_varex <- pr_var/sum(pr_var)
prop_varex
#scree plot
plot(prop_varex, xlab = "Principal Component", ylab = "Proportion of Variance Explained",type = "b")
#cumulative scree plot
plot(cumsum(prop_varex), xlab = "Principal Component", ylab = "Cumulative Proportion of Variance Explained", type = "b")
#add a training set with principal components
train.data <- data.frame(GT = train$GT, prin_comp$x)
#we are interested in first n PCAs, the ones that account for 95% of the variance
n = 0
cumulative <- cumsum(prop_varex)
for(val in cumulative) {
if(val <= 0.95){
n = n + 1
}
}
train.data <- train.data[,1:n]
#run a decision tree
#pca.train$GT <- combi$GT[1:nrow(train)] #Hafa GT með svona? ss ekki í PCA sjálfu???
pca.train$GT <- as.factor(pca.train$GT)
library(rpart)
rpart.model <- rpart(GT ~ .,data = pca.train)
rpart.model
#transform test into PCA
#test.data <- predict(prin_comp, newdata = pca.test)
#test.data <- as.data.frame(test.data)
#select the first n components, they account for 95% of the variance
#test.data <- test.data[,1:n]
#make prediction on test data
rpart.prediction <- predict(rpart.model, pca.test)
test$GT <- rpart.prediction
write.csv(test, "pca.csv", row.names = F)
train1 <- read.delim("output_adtrain.txt")
test1 <- read.delim("output_adtest.txt")
info <- read.delim("output_info.txt")
train <- merge(train1,info,by="Variant")
test <- merge(test1,info,by="Variant")
test$GT <- 1
combi <- rbind(train, test)
#combi$REF_AD <- ifelse(combi$REF_AD == 0, median(combi$REF_AD), combi$REF_AD)
#combi$ALT_AD <- ifelse(combi$ALT_AD == 0, median(combi$ALT_AD), combi$ALT_AD)
#Find columns with no variance, wan to remove that
no_var <- which(apply(combi, 2, var)==0)
my_data <- subset(combi, select = -c(GT, Sample, Variant, no_var))
colnames(my_data)
str(my_data)
#divide data
pca.train <- my_data[1:nrow(train),]
pca.test <- my_data[-(1:nrow(train)),]
#principal component analysis
prin_comp <- prcomp(pca.train, scale. = T)
names(prin_comp)
#outputs the mean of variables
prin_comp$center
#outputs the standard deviation of variables
prin_comp$scale
#outputs prinicipal component loading
prin_comp$rotation
#plot resultant principal components
biplot(prin_comp, scale = 0)
#compute standard deviation of each principal component
std_dev <- prin_comp$sdev
#compute variance
pr_var <- std_dev^2
#check variance of first 10 components
pr_var
#proportion of variance explained
prop_varex <- pr_var/sum(pr_var)
prop_varex
#scree plot
plot(prop_varex, xlab = "Principal Component", ylab = "Proportion of Variance Explained",type = "b")
#cumulative scree plot
plot(cumsum(prop_varex), xlab = "Principal Component", ylab = "Cumulative Proportion of Variance Explained", type = "b")
#add a training set with principal components
train.data <- data.frame(GT = train$GT, prin_comp$x)
#we are interested in first n PCAs, the ones that account for 95% of the variance
n = 0
cumulative <- cumsum(prop_varex)
for(val in cumulative) {
if(val <= 0.95){
n = n + 1
}
}
train.data <- train.data[,1:n]
#run a decision tree
#pca.train$GT <- combi$GT[1:nrow(train)] #Hafa GT með svona? ss ekki í PCA sjálfu???
pca.train$GT <- as.factor(pca.train$GT)
library(rpart)
rpart.model <- rpart(GT ~ .,data = pca.train)
rpart.model
#transform test into PCA
#test.data <- predict(prin_comp, newdata = pca.test)
#test.data <- as.data.frame(test.data)
#select the first n components, they account for 95% of the variance
#test.data <- test.data[,1:n]
#make prediction on test data
rpart.prediction <- predict(rpart.model, pca.test)
test$GT <- rpart.prediction
write.csv(test, "pca.csv", row.names = F)
train1 <- read.delim("output_adtrain.txt")
test1 <- read.delim("output_adtest.txt")
info <- read.delim("output_info.txt")
train <- merge(train1,info,by="Variant")
test <- merge(test1,info,by="Variant")
test$GT <- 1
combi <- rbind(train, test)
#combi$REF_AD <- ifelse(combi$REF_AD == 0, median(combi$REF_AD), combi$REF_AD)
#combi$ALT_AD <- ifelse(combi$ALT_AD == 0, median(combi$ALT_AD), combi$ALT_AD)
#Find columns with no variance, wan to remove that
no_var <- which(apply(combi, 2, var)==0)
my_data <- subset(combi, select = -c(GT, Sample, Variant, no_var))
colnames(my_data)
str(my_data)
#divide data
pca.train <- my_data[1:nrow(train),]
pca.test <- my_data[-(1:nrow(train)),]
#principal component analysis
prin_comp <- prcomp(pca.train, scale. = T)
names(prin_comp)
#outputs the mean of variables
prin_comp$center
#outputs the standard deviation of variables
prin_comp$scale
#outputs prinicipal component loading
prin_comp$rotation
#plot resultant principal components
biplot(prin_comp, scale = 0)
#compute standard deviation of each principal component
std_dev <- prin_comp$sdev
#compute variance
pr_var <- std_dev^2
#check variance of first 10 components
pr_var
#proportion of variance explained
prop_varex <- pr_var/sum(pr_var)
prop_varex
#scree plot
plot(prop_varex, xlab = "Principal Component", ylab = "Proportion of Variance Explained",type = "b")
#cumulative scree plot
plot(cumsum(prop_varex), xlab = "Principal Component", ylab = "Cumulative Proportion of Variance Explained", type = "b")
#add a training set with principal components
train.data <- data.frame(GT = train$GT, prin_comp$x)
#we are interested in first n PCAs, the ones that account for 95% of the variance
n = 0
cumulative <- cumsum(prop_varex)
for(val in cumulative) {
if(val <= 0.95){
n = n + 1
}
}
train.data <- train.data[,1:n]
#run a decision tree
pca.train$GT <- combi$GT[1:nrow(train)] #Hafa GT með svona? ss ekki í PCA sjálfu???
pca.train$GT <- as.factor(pca.train$GT)
library(rpart)
rpart.model <- rpart(GT ~ .,data = pca.train)
rpart.model
#transform test into PCA
#test.data <- predict(prin_comp, newdata = pca.test)
#test.data <- as.data.frame(test.data)
#select the first n components, they account for 95% of the variance
#test.data <- test.data[,1:n]
#make prediction on test data
rpart.prediction <- predict(rpart.model, pca.test)
test$GT <- rpart.prediction
write.csv(test, "pca.csv", row.names = F)
train1 <- read.delim("output_adtrain.txt")
test1 <- read.delim("output_adtest.txt")
info <- read.delim("output_info.txt")
train <- merge(train1,info,by="Variant")
test <- merge(test1,info,by="Variant")
test$GT <- 1
combi <- rbind(train, test)
#combi$REF_AD <- ifelse(combi$REF_AD == 0, median(combi$REF_AD), combi$REF_AD)
#combi$ALT_AD <- ifelse(combi$ALT_AD == 0, median(combi$ALT_AD), combi$ALT_AD)
#Find columns with no variance, wan to remove that
no_var <- which(apply(combi, 2, var)==0)
my_data <- subset(combi, select = -c(Sample, Variant, no_var))
colnames(my_data)
str(my_data)
#divide data
pca.train <- my_data[1:nrow(train),]
pca.test <- my_data[-(1:nrow(train)),]
#principal component analysis
prin_comp <- prcomp(pca.train, scale. = T)
names(prin_comp)
#outputs the mean of variables
prin_comp$center
#outputs the standard deviation of variables
prin_comp$scale
#outputs prinicipal component loading
prin_comp$rotation
#plot resultant principal components
biplot(prin_comp, scale = 0)
#compute standard deviation of each principal component
std_dev <- prin_comp$sdev
#compute variance
pr_var <- std_dev^2
#check variance of first 10 components
pr_var
#proportion of variance explained
prop_varex <- pr_var/sum(pr_var)
prop_varex
#scree plot
plot(prop_varex, xlab = "Principal Component", ylab = "Proportion of Variance Explained",type = "b")
#cumulative scree plot
plot(cumsum(prop_varex), xlab = "Principal Component", ylab = "Cumulative Proportion of Variance Explained", type = "b")
#add a training set with principal components
train.data <- data.frame(GT = train$GT, prin_comp$x)
#we are interested in first n PCAs, the ones that account for 95% of the variance
n = 0
cumulative <- cumsum(prop_varex)
for(val in cumulative) {
if(val <= 0.95){
n = n + 1
}
}
train.data <- train.data[,1:n]
#run a decision tree
#pca.train$GT <- combi$GT[1:nrow(train)] #Hafa GT með svona? ss ekki í PCA sjálfu???
pca.train$GT <- as.factor(pca.train$GT)
library(rpart)
rpart.model <- rpart(GT ~ .,data = pca.train)
rpart.model
#transform test into PCA
#test.data <- predict(prin_comp, newdata = pca.test)
#test.data <- as.data.frame(test.data)
#select the first n components, they account for 95% of the variance
#test.data <- test.data[,1:n]
#make prediction on test data
rpart.prediction <- predict(rpart.model, pca.test)
test$GT <- rpart.prediction
write.csv(test, "pca.csv", row.names = F)
require(randomForest)
require(MASS)#Package which contains the Boston housing dataset
install.packages(randomForest)
library(randomForest)
installed.packages()
install(randomForest)
install.packages(randomForest)
install.packages("randomForest")
require(randomForest)
require(MASS)#Package which contains the Boston housing dataset
attach(Boston)
set.seed(101)
dim(Boston)
train=sample(1:nrow(Boston),300)
?Boston  #to search on the dataset
train
Boston.rf=randomForest(medv ~ . , data = Boston , subset = train)
Boston.rf
plot(Boston.rf)
oob.err=double(13)
test.err=double(13)
for(mtry in 1:13)
{
rf=randomForest(medv ~ . , data = Boston , subset = train,mtry=mtry,ntree=400)
oob.err[mtry] = rf$mse[400] #Error of all Trees fitted
pred<-predict(rf,Boston[-train,]) #Predictions on Test Set for each Tree
test.err[mtry]= with(Boston[-train,], mean( (medv - pred)^2)) #Mean Squared Test Error
cat(mtry," ") #printing the output to the console
}
test.err
oob.err
matplot(1:mtry , cbind(oob.err,test.err), pch=19 , col=c("red","blue"),type="b",ylab="Mean Squared Error",xlab="Number of Predictors Considered at each Split")
legend("topright",legend=c("Out of Bag Error","Test Error"),pch=19, col=c("red","blue"))
train1 <- read.delim("output_adtrain.txt")
test1 <- read.delim("output_adtest.txt")
info <- read.delim("output_info.txt")
train <- merge(train1,info,by="Variant")
test <- merge(test1,info,by="Variant")
test$GT <- 1
combi <- rbind(train, test)
#combi$REF_AD <- ifelse(combi$REF_AD == 0, median(combi$REF_AD), combi$REF_AD)
#combi$ALT_AD <- ifelse(combi$ALT_AD == 0, median(combi$ALT_AD), combi$ALT_AD)
#Find columns with no variance, wan to remove that
no_var <- which(apply(combi, 2, var)==0)
my_data <- subset(combi, select = -c(Sample, Variant, no_var)) #Hafa GT hér eða ekki, virðist ekki breyta neinu
colnames(my_data)
str(my_data)
#divide data
pca.train <- my_data[1:nrow(train),]
pca.test <- my_data[-(1:nrow(train)),]
#principal component analysis
prin_comp <- prcomp(pca.train, scale. = T)
names(prin_comp)
#outputs the mean of variables
prin_comp$center
#outputs the standard deviation of variables
prin_comp$scale
#outputs prinicipal component loading
prin_comp$rotation
#plot resultant principal components
biplot(prin_comp, scale = 0)
#compute standard deviation of each principal component
std_dev <- prin_comp$sdev
#compute variance
pr_var <- std_dev^2
#check variance of first 10 components
pr_var
#proportion of variance explained
prop_varex <- pr_var/sum(pr_var)
prop_varex
#scree plot
plot(prop_varex, xlab = "Principal Component", ylab = "Proportion of Variance Explained",type = "b")
#cumulative scree plot
plot(cumsum(prop_varex), xlab = "Principal Component", ylab = "Cumulative Proportion of Variance Explained", type = "b")
#add a training set with principal components
train.data <- data.frame(GT = train$GT, prin_comp$x)
#we are interested in first n PCAs, the ones that account for 95% of the variance
n = 0
cumulative <- cumsum(prop_varex)
for(val in cumulative) {
if(val <= 0.95){
n = n + 1
}
}
train.data <- train.data[,1:n]
#run a decision tree
#pca.train$GT <- combi$GT[1:nrow(train)] #Hafa GT með svona? ss ekki í PCA sjálfu??? virðist ekki breyta neinu
pca.train$GT <- as.factor(pca.train$GT)
#library(rpart)
#rpart.model <- rpart(GT ~ .,data = pca.train)
#rpart.model
#random forest
require(randomForest)
require(MASS)#Package which contains the Boston housing dataset
set.seed(101)
#fitting the random forest
data.rf=randomForest(GT ~ . , data = my_data , subset = pca.train)
data.rf
train1 <- read.delim("output_adtrain.txt")
test1 <- read.delim("output_adtest.txt")
info <- read.delim("output_info.txt")
train <- merge(train1,info,by="Variant")
test <- merge(test1,info,by="Variant")
test$GT <- 1
combi <- rbind(train, test)
#combi$REF_AD <- ifelse(combi$REF_AD == 0, median(combi$REF_AD), combi$REF_AD)
#combi$ALT_AD <- ifelse(combi$ALT_AD == 0, median(combi$ALT_AD), combi$ALT_AD)
#Find columns with no variance, wan to remove that
no_var <- which(apply(combi, 2, var)==0)
my_data <- subset(combi, select = -c(Sample, Variant, no_var)) #Hafa GT hér eða ekki, virðist ekki breyta neinu
colnames(my_data)
str(my_data)
#divide data
train <- my_data[1:nrow(train),]
test <- my_data[-(1:nrow(train)),]
require(randomForest)
require(MASS)#Package which contains the Boston housing dataset
attach(my_data)
set.seed(101)
dim(my_data)
mydata.rf=randomForest(medv ~ . , data = my_data , subset = train)
mydata.rf=randomForest(GT ~ . , data = my_data , subset = train)
mydata.rf
train <- my_data(1:nrow(train))
n <- 1:nrow(train)
train <- sample(1:nrow(my_data),n)
require(randomForest)
require(MASS)#Package which contains the Boston housing dataset
attach(my_data)
set.seed(101)
dim(my_data)
mydata.rf=randomForest(GT ~ . , data = my_data , subset = train)
mydata.rf
plot(mydata.rf)
oob.err=double(13)
test.err=double(13)
for(mtry in 1:13)
{
rf=randomForest(GT ~ . , data = my_data , subset = train,mtry=mtry,ntree=400)
oob.err[mtry] = rf$mse[400] #Error of all Trees fitted
pred<-predict(rf,my_data[-train,]) #Predictions on Test Set for each Tree
test.err[mtry]= with(my_data[-train,], mean( (GT - pred)^2)) #Mean Squared Test Error
cat(mtry," ") #printing the output to the console
}
test.err
oob.err
matplot(1:mtry , cbind(oob.err,test.err), pch=19 , col=c("red","blue"),type="b",ylab="Mean Squared Error",xlab="Number of Predictors Considered at each Split")
legend("topright",legend=c("Out of Bag Error","Test Error"),pch=19, col=c("red","blue"))
write.csv(pred, "randomforest.csv", row.names = F)
train1 <- read.delim("output_adtrain.txt")
test1 <- read.delim("output_adtest.txt")
info <- read.delim("output_info.txt")
train <- merge(train1,info,by="Variant")
test <- merge(test1,info,by="Variant")
test$GT <- 1
combi <- rbind(train, test)
#combi$REF_AD <- ifelse(combi$REF_AD == 0, median(combi$REF_AD), combi$REF_AD)
#combi$ALT_AD <- ifelse(combi$ALT_AD == 0, median(combi$ALT_AD), combi$ALT_AD)
#Find columns with no variance, wan to remove that
no_var <- which(apply(combi, 2, var)==0)
my_data <- subset(combi, select = -c(GT, Sample, Variant, no_var)) #Hafa GT hér eða ekki, virðist ekki breyta neinu
colnames(my_data)
str(my_data)
#divide data
pca.train <- my_data[1:nrow(train),]
pca.test <- my_data[-(1:nrow(train)),]
#principal component analysis
prin_comp <- prcomp(pca.train, scale. = T)
names(prin_comp)
#outputs the mean of variables
prin_comp$center
#outputs the standard deviation of variables
prin_comp$scale
#outputs prinicipal component loading
prin_comp$rotation
#plot resultant principal components
biplot(prin_comp, scale = 0)
#compute standard deviation of each principal component
std_dev <- prin_comp$sdev
#compute variance
pr_var <- std_dev^2
#check variance of first 10 components
pr_var
#proportion of variance explained
prop_varex <- pr_var/sum(pr_var)
prop_varex
#scree plot
plot(prop_varex, xlab = "Principal Component", ylab = "Proportion of Variance Explained",type = "b")
#cumulative scree plot
plot(cumsum(prop_varex), xlab = "Principal Component", ylab = "Cumulative Proportion of Variance Explained", type = "b")
#add a training set with principal components
train.data <- data.frame(GT = train$GT, prin_comp$x)
#we are interested in first n PCAs, the ones that account for 95% of the variance
n = 0
cumulative <- cumsum(prop_varex)
for(val in cumulative) {
if(val <= 0.95){
n = n + 1
}
}
train.data <- train.data[,1:n]
#run a decision tree
pca.train$GT <- combi$GT[1:nrow(train)] #Hafa GT með svona? ss ekki í PCA sjálfu??? virðist ekki breyta neinu
pca.train$GT <- as.factor(pca.train$GT)
library(rpart)
rpart.model <- rpart(GT ~ .,data = pca.train)
rpart.model
#transform test into PCA
#test.data <- predict(prin_comp, newdata = pca.test)
#test.data <- as.data.frame(test.data)
#select the first n components, they account for 95% of the variance
#test.data <- test.data[,1:n]
#make prediction on test data
rpart.prediction <- predict(rpart.model, pca.test)
test$GT <- rpart.prediction
write.csv(test, "pca.csv", row.names = F)
plot(rpart.model)
text(rpart.model)
text(rpart.model, pretty = FALSE)
text(rpart.model, pretty = TRUE)
rpart.model
library(tree)
install.packages("tree")
library(tree)
rpart.model <- tree(GT ~ .,data = pca.train)
rpart.model
plot(rpart.model)
text(rpart.model)
?prune.tree
prune.tree(rpart.model, best=4)
prune.tree(rpart.model, best=3)
rpart.model <- prune.tree(rpart.model, best=3)
rpart.model
plot(rpart.model)
text(rpart.model)
